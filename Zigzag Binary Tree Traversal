import java.util.* ;
import java.io.*; 
/************************************************************

    Following is the TreeNode class structure

    class TreeNode<T> 
    {
       public:
        T data;
        TreeNode<T> left;
        TreeNode<T> right;

        TreeNode(T data) 
        {
            this.data = data;
            left = null;
            right = null;
        }
    };

************************************************************/

import java.util.ArrayList;

public class Solution 
{
    public static ArrayList<Integer> zigzagTreeTraversal(TreeNode<Integer> root) 
    {
        //    Write your code here.
        ArrayList<Integer> result = new ArrayList<>();
        if (root == null)
            return result;

        Deque<TreeNode<Integer>> queue = new LinkedList<>();
        queue.add(root);
        boolean reverse = false;

        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            ArrayList<Integer> levelValues = new ArrayList<>();

            for (int i = 0; i < levelSize; i++) {
                TreeNode<Integer> node = queue.poll();

                // Add the node's value to the levelValues list based on the traversal direction
                if (reverse)
                    levelValues.add(0, node.data);
                else
                    levelValues.add(node.data);

                // Add the left and right child nodes to the queue
                if (node.left != null)
                    queue.add(node.left);
                if (node.right != null)
                    queue.add(node.right);
            }

            // Reverse the traversal direction for the next level
            reverse = !reverse;

            // Add the level values to the result list
            result.addAll(levelValues);
        }

        return result;

    }
}
